Map-
we find ourselves needing to take an array and modify every element in it in exactly the same way.
map is a method built to do exactly that. It's defined on Array.prototype, so you can call it on any array, and it accepts a callback as its first argument.

When you call map on an array, it executes that callback on every element within it, returning a new array with all of the values that the callback returned.

Under the hood, map passes three arguments to your callback:
The current item in the array
The array index of the current item
The entire array you called map on
remember to include a return statement in your callback. If you don't, you'll get a new array filled with undefined.

Filter-
It takes an array, and filters out unwanted elements.
Like map, filter is defined on Array.prototype. It's available on any array, and you pass it a callback as its first argument. filter executes that callback on each element of the array, and spits out a new array containing only the elements for which the callback returned true.
filter passes your callback three arguments:
The current item
The current index
The array you called filter on
Reduce-
map creates a new array by transforming every element in an array, individually. filter creates a new array by removing elements that don't belong. reduce, on the other hand, takes all of the elements in an array, and reduces them into a single value.
reduce passes your callback four arguments:
The current value
The previous value
The current index
The array you called reduce on

